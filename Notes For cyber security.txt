.File and Directory Management
1.	pwd
o	What it does: Shows the folder you're currently in.
o	Usage: Just type pwd and press Enter.
o	Example: /home/user means you’re in the "user" folder.
2.	ls
o	What it does: Lists all files and folders in the current location.
o	Usage: Just type ls and press Enter.
3.	cd [folder]
o	What it does: Changes the current folder to a different one.
o	Usage: cd folder_name
o	Example: cd Documents moves you to the "Documents" folder.
4.	mkdir [folder]
o	What it does: Makes a new folder.
o	Usage: mkdir new_folder
o	Example: mkdir Projects creates a new folder called "Projects".
5.	rm [file]
o	What it does: Deletes a file.
o	Usage: rm file_name
o	Example: rm text.txt deletes "text.txt".
6.	cp [file] [destination]
o	What it does: Copies a file to a different location.
o	Usage: cp file_name destination_folder
o	Example: cp file.txt /home/user/Documents/ copies "file.txt" to the Documents folder.
7.	mv [file] [destination]
o	What it does: Moves or renames a file.
o	Usage: mv file_name destination_folder
o	Example: mv file.txt /home/user/Documents/ moves "file.txt" to Documents.
8.	cat [file]
o	What it does: Displays the contents of a file.
o	Usage: cat file_name
o	Example: cat notes.txt shows what’s inside "notes.txt".
9.	touch [file]
o	What it does: Creates an empty file.
o	Usage: touch file_name
o	Example: touch file.txt creates an empty file called "file.txt".
10.	chmod [permissions] [file]
o	What it does: Changes file permissions.
o	Usage: chmod 755 file_name
o	Example: chmod 755 script.sh gives the owner full permissions and others read/execute permission.
System Information
11.	uname
o	What it does: Displays information about the system.
o	Usage: Type uname and press Enter.
o	Example: uname -a gives detailed system info like the kernel version.
12.	whoami
o	What it does: Tells you which user you're logged in as.
o	Usage: Just type whoami and press Enter.
Process Management
13.	ps
o	What it does: Lists running processes.
o	Usage: Type ps and press Enter.
o	Example: ps aux shows all processes running on the system.
14.	kill [process_id]
o	What it does: Stops (kills) a running process.
o	Usage: Find the process ID with ps aux and stop it using kill process_id.
o	Example: kill 1234 stops the process with ID 1234.
Network Commands
15.	ifconfig
o	What it does: Shows network interface information like IP addresses.
o	Usage: Type ifconfig to see details about your network connections.
16.	ping [website or IP]
o	What it does: Tests if your computer can reach another computer or website.
o	Usage: ping google.com
o	Example: ping google.com sends packets to Google's server to check if it's reachable.
17.	hostname
o	What it does: Shows or sets your computer’s network name.
o	Usage: Type hostname to display the current computer's name.
18.	curl [URL]
o	What it does: Fetches data from a URL (website).
o	Usage: curl http://example.com
o	Example: curl http://example.com downloads the page from example.com.
19.	wget [URL]
o	What it does: Downloads files from the web.
o	Usage: wget http://example.com/file.txt
o	Example: wget http://example.com/file.txt downloads "file.txt" from the website.
20.	traceroute [website or IP]
o	What it does: Shows the path your data takes to reach a website.
o	Usage: traceroute google.com
o	Example: traceroute google.com shows the network path to Google.
21.	nslookup [website]
o	What it does: Looks up the IP address of a domain name.
o	Usage: nslookup google.com
o	Example: nslookup google.com shows the IP address for Google.
22.	netstat
o	What it does: Displays network connections and routing tables.
o	Usage: Just type netstat to see active network connections.
o	Example: netstat -tuln shows active listening ports and services.
23.	ip addr
o	What it does: Shows or manages IP addresses on your machine.
o	Usage: Type ip addr to see all network interfaces and their IP addresses.
24.	ss
o	What it does: Displays socket statistics and active connections.
o	Usage: ss provides more detailed info than netstat.
o	Example: ss -tuln shows all listening ports and services.
25.	route
o	What it does: Displays or manipulates the IP routing table.
o	Usage: Just type route to see the routing table.
26.	ip route
o	What it does: Shows or configures the routing table.
o	Usage: Type ip route to see your current network routes.
27.	whois [domain]
o	What it does: Shows information about a domain name.
o	Usage: whois google.com gives info about the Google domain.
Disk and File System Management
28.	df
o	What it does: Shows how much space is left on your hard drive.
o	Usage: Type df -h to see space usage in a human-readable format.
29.	du
o	What it does: Displays the size of files and folders.
o	Usage: Type du -h to see folder sizes in a human-readable format.
o	Example: du -h folder_name/ shows the size of a folder.
Miscellaneous
30.	clear
o	What it does: Clears the terminal screen.
o	Usage: Just type clear and press Enter.
31.	history
o	What it does: Shows a list of all the commands you've typed recently.
o	Usage: Type history and press Enter.
32.	echo [text]
o	What it does: Prints text to the terminal or writes text into a file.
o	Usage:
	Example 1: echo "Hello World" prints "Hello World" to the terminal.
	Example 2: echo "Hello" > file.txt writes "Hello" into the file "file.txt".
Package Management
33.	sudo
o	What it does: Gives you permission to run certain commands as a superuser.
o	Usage: Type sudo before a command that needs special permissions.
o	Example: sudo apt update updates the software.
34.	sudo apt update
o	What it does: Updates the list of available software and versions.
o	Usage: Just type sudo apt update to refresh the package list.
35.	sudo apt upgrade
o	What it does: Installs newer versions of the software installed on your system.
o	Usage: Type sudo apt upgrade to update all software to the latest versions.
36.	sudo apt install [package_name]
o	What it does: Installs a new package (software).
o	Usage: sudo apt install package_name
o	Example: sudo apt install firefox installs Firefox.
37.	sudo apt remove [package_name]
o	What it does: Uninstalls a package.
o	Usage: sudo apt remove package_name
o	Example: sudo apt remove firefox removes Firefox.









Basic Commands
#!/bin/bash: Shebang, specifies that the script should be executed with Bash.
echo: Prints text to the terminal.
#: Denotes a comment.
Variables
Variable assignment: Assigns a value to a variable.
$: Used to access the value of a variable.
User Input
read: Accepts input from the user.
Conditional Statements
if: Begins a conditional block.
else: Specifies alternate code if the if condition is false.
elif: Adds another condition within an if block.
fi: Ends an if block.
Loops
while: Creates a loop that runs while a condition is true.
for: Iterates over a list of items.
break: Exits a loop early.
continue: Skips the current iteration of a loop.
Functions
function: Defines a reusable block of code.
return: Exits a function and optionally returns a value.
Exit and Error Handling
exit: Exits the script and optionally returns a status code.
trap: Defines actions to take when a script receives a signal (e.g., cleanup on exit).
File Operations
touch: Creates an empty file or updates the timestamp of an existing file.
chmod: Changes file permissions.
chown: Changes file or directory ownership.
rm: Removes files or directories.
Process Management
ps: Displays running processes.
kill: Terminates a process by its process ID.
sleep: Pauses the script for a specified amount of time.
Arithmetic
let: Performs arithmetic operations.
(( )): Arithmetic evaluation.
File Testing
[ -f ]: Tests if a file exists and is a regular file.
[ -d ]: Tests if a directory exists.
[ -r ]: Checks if a file is readable.
[ -w ]: Checks if a file is writable.
[ -x ]: Checks if a file is executable.















Bash script

1. Shebang: Telling the System it's a Bash Script
At the top of every Bash script, include the shebang:
bash
Copy code
#!/bin/bash
This tells your system to use the Bash shell to run the script.
________________________________________
2. Comments: Explaining Your Code
Use # to write comments so that your code is easier to understand (comments won't run as code).
Example:
bash
Copy code
#!/bin/bash
# This is a comment, and it won't be executed.
________________________________________
3. Print Text: Using echo
To display text in the terminal, use the echo command.
Example:
bash
Copy code
#!/bin/bash
echo "Hello, World!"
Output:
Copy code
Hello, World!
________________________________________
4. Variables: Storing Information
Variables let you store information to reuse later. No $ when assigning, but use $ to refer to the variable.
Example:
bash
Copy code
#!/bin/bash
# Defining a variable
name="Alice"

# Using the variable
echo "Hello, $name!"
Output:
Copy code
Hello, Alice!
________________________________________
5. Input from the User: read
You can ask the user for input with read.
Example:
bash
Copy code
#!/bin/bash
# Ask for the user's name
echo "What's your name?"
read name

# Greet the user
echo "Hello, $name!"
Output (if the user types "Bob"):
rust
Copy code
What's your name?
Bob
Hello, Bob!
________________________________________
6. Simple If-Else Conditions: Making Decisions
Use if to run code only if a condition is true.
Example:
bash
Copy code
#!/bin/bash
# Ask if the user is having a good day
echo "Are you having a good day? (yes/no)"
read answer

if [ "$answer" = "yes" ]; then
    echo "Great to hear!"
else
    echo "Hope it gets better!"
fi
Output:
•	If the user types yes, the output will be Great to hear!
•	If they type anything else, the output will be Hope it gets better!
________________________________________
7. Loops: Repeating Actions
While Loop:
Keeps running as long as a condition is true.
Example:
bash
Copy code
#!/bin/bash
# Print numbers from 1 to 5
count=1
while [ $count -le 5 ]; do
    echo "Number: $count"
    ((count++))  # Increase the count by 1
done
Output:
javascript
Copy code
Number: 1
Number: 2
Number: 3
Number: 4
Number: 5
For Loop:
Runs a set number of times.
Example:
bash
Copy code
#!/bin/bash
# Loop through a list of items
for fruit in apple banana cherry; do
    echo "I like $fruit"
done
Output:
css
Copy code
I like apple
I like banana
I like cherry
________________________________________
8. Functions: Grouping Tasks Together
Functions allow you to group commands and run them by calling the function's name.
Example:
bash
Copy code
#!/bin/bash
# Define a function
greet() {
    echo "Hello, $1!"  # $1 is the first argument passed to the function
}

# Call the function with an argument
greet "Alice"
Output:
Copy code
Hello, Alice!
________________________________________
9. Combining Everything in One Script
Here’s a script that combines variables, user input, conditions, loops, and a function:
bash
Copy code
#!/bin/bash

# Function to greet the user
greet() {
    echo "Hello, $1!"
}

# Ask for the user's name
echo "What's your name?"
read name

# Greet the user
greet "$name"

# Ask if the user likes fruits
echo "Do you like fruits? (yes/no)"
read answer

if [ "$answer" = "yes" ]; then
    # Print favorite fruits in a loop
    echo "Here are some fruits:"
    for fruit in apple banana cherry; do
        echo "I like $fruit"
    done
else
    echo "That's okay! Not everyone likes fruits."
fi
________________________________________
10. Run Your Script
1.	Save the script as my_script.sh.
2.	Make it executable with:
bash
Copy code
chmod +x my_script.sh
3.	Run it with:
bash
Copy code
./my_script.sh


















System Monitoring
1. What is System Monitoring? Why is it important for maintaining a healthy Linux system?
•	System Monitoring is the process of checking the performance and health of your computer, such as CPU, memory, and disk usage.
•	Why is it important?
o	It helps identify and fix problems (like high resource usage) before they affect the system's performance.
o	It ensures that the system is running smoothly and efficiently.
________________________________________
2. Key Tools for System Monitoring
a. top
•	What it does:
Displays real-time system processes, CPU, memory, and load averages.
•	Example:
Run top to monitor active processes.
Press q to quit.
b. htop
•	What it does:
Provides an easy-to-read, colorful display of system resource usage.
•	Example:
Run htop for a detailed view of CPU, memory, and running processes.
Press q to quit.
Installation:
bash
Copy code
sudo apt install htop
c. df
•	What it does:
Shows available disk space on mounted filesystems.
•	Example:
Run df -h to see disk usage in a human-readable format.
d. uptime
•	What it does:
Displays how long the system has been running and system load.
•	Example:
Run uptime to check system load averages over the last 1, 5, and 15 minutes.
________________________________________
3. Log Monitoring
a. journalctl
•	What it does:
Views and manages system logs on Linux.
•	Example:
Run journalctl -xe to display recent system errors and logs.
b. /var/log
•	What it is:
A directory that stores important system logs (like kernel logs and boot logs).
•	Example:
To view the system log, use:
bash
Copy code
cat /var/log/syslog
________________________________________
4. Self-Made Instructions: Monitoring System Resource Usage and Checking Logs
Step 1: Check System Resource Usage
•	Run htop to see live CPU and memory usage.
•	Press q to quit the tool.
Step 2: Check Disk Usage
•	Run df -h to check how much disk space is available.
Step 3: Check System Uptime and Load
•	Run uptime to see how long the system has been running and the system load averages.
Step 4: Check System Logs for Issues
•	Run journalctl -xe to see recent system errors.
•	Check /var/log/syslog for more general system logs.
Example command:
bash
Copy code
cat /var/log/syslog
This basic process helps you monitor system performance and troubleshoot issues.










1. Definition: Basic System Security Principles on Linux
Keep software up to date: Always update the system and installed programs to fix vulnerabilities.
Use strong passwords: Ensure passwords are complex to prevent unauthorized access.
Restrict file permissions: Limit who can read, write, or execute files to reduce security risks.
Use firewalls: Control which network traffic is allowed to enter or leave your system.
2. File Permissions
Explanation:
In Linux, every file and folder has permissions that control who can read, write, or execute them:
Read (r): Allows viewing the content.
Write (w): Allows modifying or deleting the content.
Execute (x): Allows running a file as a program.
Key Commands:
chmod: Changes file/folder permissions.

Example: Make a file executable (add execute permission):
bash
Copy code
chmod +x filename
chown: Changes the ownership of a file/folder.

Example: Change file ownership to user muhammad:
bash
Copy code
sudo chown muhammad filename
ls -l: Lists files with their permissions.

Example: View permissions of files in a directory:
bash
Copy code
ls -l
3. User Management
Key Commands:
Create a user:

Use adduser to create a new user.
bash
Copy code
sudo adduser username
Modify a user:

Use usermod to modify a user (e.g., change user groups or home directory).
bash
Copy code
sudo usermod -aG groupname username
Delete a user:

Use deluser to remove a user from the system.
bash
Copy code
sudo deluser username
Assign Permissions to Users:
Example: To give a user read, write, and execute access to a folder, use chmod and chown:
bash
Copy code
sudo chown username foldername
sudo chmod 700 foldername
4. Firewall Basics
What is UFW (Uncomplicated Firewall)?
UFW is a simple tool for managing firewall rules to control incoming/outgoing traffic.
Key Commands:
Enable UFW:

bash
Copy code
sudo ufw enable
Allow a port (e.g., port 22 for SSH):

bash
Copy code
sudo ufw allow 22
Deny a port (e.g., block a port):

bash
Copy code
sudo ufw deny 8080
Check UFW status:

bash
Copy code
sudo ufw status
5. Self-Made Instructions
Securing a Folder with Permissions:
Change folder ownership to the correct user:
bash
Copy code
sudo chown username foldername
Restrict access to the owner only:
bash
Copy code
chmod 700 foldername
Setting Up Basic Firewall Rules:
Enable UFW:
bash
Copy code
sudo ufw enable
Allow a service (e.g., SSH on port 22):
bash
Copy code
sudo ufw allow 22
Deny access to a port (e.g., block port 8080):
bash
Copy code
sudo ufw deny 8080
Using Git for Updates
Commit Your Changes Regularly:

After adding or updating notes, use git commit with a clear message.
Example:
bash
Copy code
git commit -m "Updated system security notes"
Push Your Changes to GitHub:

After committing, push the changes to your GitHub repository:
bash
Copy code
git push
















Git:
 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
S